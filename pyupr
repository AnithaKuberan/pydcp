#!/usr/local/bin/python

import argparse
import logging
import unittest

from unit import *

def run_upr_testsuite(remote):
    upr_suite = unittest.TestSuite()
    upr_suite.addTest(ParametrizedTestCase.parametrize(UprTestCase, remote))
    unittest.TextTestRunner(verbosity=2).run(upr_suite)

def run_mcd_testsuite(remote):
    mcd_suite = unittest.TestSuite()
    mcd_suite.addTest(ParametrizedTestCase.parametrize(McdTestCase, remote))
    unittest.TextTestRunner(verbosity=2).run(mcd_suite)

def run_testsuite(suite, remote):
    if suite == 'all':
        run_upr_testsuite(remote)
        run_mcd_testsuite(remote)
    elif suite == 'upr':
        run_upr_testsuite(remote)
    elif suite == 'mcd':
        run_mcd_testsuite(remote)
    else:
        print "Invalid testsuite type '%s'" % suite
        sys.exit(0)

def get_remote_server(remote):
    if remote == 'cb':
        return RemoteServer.CB
    elif remote == 'dev':
        return RemoteServer.DEV
    elif remote == 'mcd':
        return RemoteServer.MCD
    else:
        print "Invalid remote server type '%s'" % remote
        sys.exit(0)

def set_log_level(level):
    if level == None:
        logging.basicConfig(level=logging.ERROR)
    elif level == 1:
        logging.basicConfig(level=logging.WARNING)
    elif level == 2:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.DEBUG)

def main():
    parser = argparse.ArgumentParser(description='Upr unit test framework')

    parser.add_argument('-s', '--suite', default='all',
                        help='testsuite to execute')
    parser.add_argument('-r', '--remote', default='cb',
                        help='remote server to run against')
    parser.add_argument('-v', '--verbosity', action='count',
                        help='verbosity level')

    args = parser.parse_args()
    remote = get_remote_server(args.remote)
    set_log_level(args.verbosity)
    run_testsuite(args.suite, remote)

if __name__ == "__main__":
    main()
