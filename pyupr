#!/usr/bin/env python

import argparse
import logging
import sys

try:
    import unittest2 as unittest
except ImportError:
    import unittest

from unit import *

class PyUPR:

    def __init__(self, suite, backend, hosts, port, xml):
        self.suite = suite
        self.backend = backend
        self.hosts = hosts
        self.host = hosts[0]
        self.port = port
        self.xml = xml

    def run_test(self):

        if self.suite == 'all':
            self.run_suite(UprTestCase)
            self.run_suite(McdTestCase)
            if len(self.hosts) > 1:
                self.run_suite(RebTestCase)

        elif self.suite == 'upr':
            self.run_suite(UprTestCase)
        elif self.suite == 'mcd':
            self.run_suite(McdTestCase)
        elif self.suite == 'exp':
            self.run_suite(ExpTestCase)
        elif self.suite == 'reb':
            if len(self.hosts) <= 1:
                    print "At least 2 hosts required to run rebalance suite"
                    sys.exit(0)
            self.run_suite(RebTestCase)
        else:
            print "Invalid testsuite type '%s'" % self.suite
            sys.exit(0)

    def run_suite(self, testcase_klass):
        kwargs = self.__dict__
        kwargs['testcase_klass'] = testcase_klass

        suite = unittest.TestSuite()
        suite.addTest(ParametrizedTestCase.parametrize(**kwargs))

        if self.xml:
            import xmlrunner
            xmlrunner.XMLTestRunner(verbosity=2, output="results").run(suite)
        else:
            unittest.TextTestRunner(verbosity=2).run(suite)


def get_remote_server(backend):
    if backend == 'cb':
        return RemoteServer.CB, 11210
    elif backend == 'dev':
        return RemoteServer.DEV, 12000
    elif backend == 'mcd':
        return RemoteServer.MCD, 5000
    else:
        print "Invalid backend server type '%s'" % backend
        sys.exit(0)

def set_log_level(level):
    if level == None:
        logging.basicConfig(level=logging.ERROR)
    elif level == 1:
        logging.basicConfig(level=logging.WARNING)
    elif level == 2:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.DEBUG)

def main():
    parser = argparse.ArgumentParser(prog='pyupr',
                                     usage='%(prog)s [options]',
                                     add_help=False)

    parser.add_argument('-h', '--hosts', default=['127.0.0.1:9000'], nargs='+',
                        help='the ip:port address of the server(s) to test')
    parser.add_argument('-s', '--suite', default='all',
                        help='testsuite to execute')
    parser.add_argument('-b', '--backend', default='cb',
                        help='backend server to run against')
    parser.add_argument('-v', '--verbosity', action='count',
                        help='verbosity level')
    parser.add_argument('-x', '--xml', action='store_true', default=False)

    args = parser.parse_args()
    backend, port = get_remote_server(args.backend)
    set_log_level(args.verbosity)
    pyUpr = PyUPR(args.suite, backend, args.hosts, port, args.xml)
    pyUpr.run_test()

if __name__ == "__main__":
    main()
